<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>My To‑Do List</title>
<style>
  :root {
    --bg: #0f1220;
    --panel: #171a2a;
    --text: #e7eaf6;
    --muted: #9aa3b2;
    --accent: #7c9cff;
    --accent-strong: #4e74ff;
    --danger: #ff6b6b;
    --border: #2a2f45;
  }
  * { box-sizing: border-box; }
  body {
    margin: 0; padding: 24px;
    background: radial-gradient(1200px 800px at 10% -10%, #1b2040 0%, #0f1220 40%) no-repeat, var(--bg);
    color: var(--text); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
  }
  .container {
    max-width: 560px; margin: 0 auto;
    background: rgba(23,26,42,0.8); backdrop-filter: blur(6px);
    border: 1px solid var(--border); border-radius: 14px; padding: 20px 18px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.35);
  }
  h1 { font-size: 20px; margin: 0 0 14px 0; letter-spacing: 0.2px; }
  form {
    display: flex; gap: 10px; margin-bottom: 14px;
  }
  input[type="text"] {
    flex: 1; padding: 12px 12px;
    background: #0f1328; color: var(--text);
    border: 1px solid var(--border); border-radius: 10px;
    outline: none; transition: border-color 0.15s, box-shadow 0.15s;
  }
  input[type="text"]::placeholder { color: var(--muted); }
  input[type="text"]:focus {
    border-color: var(--accent);
    box-shadow: 0 0 0 3px rgba(124,156,255,0.2);
  }
  button {
    padding: 12px 14px; border: none; border-radius: 10px; cursor: pointer;
    background: linear-gradient(180deg, var(--accent) 0%, var(--accent-strong) 100%);
    color: white; font-weight: 600; letter-spacing: 0.2px;
    transition: transform 0.05s ease, filter 0.15s ease;
  }
  button:active { transform: translateY(1px); }
  ul { list-style: none; margin: 0; padding: 0; }
  .task {
    display: flex; align-items: center; justify-content: space-between;
    gap: 10px; padding: 10px 12px; border: 1px solid var(--border);
    border-radius: 10px; background: #12162c; margin-bottom: 10px;
    transition: background 0.15s, border-color 0.15s;
  }
  .task.done { opacity: 0.75; background: #0f1533; }
  .task label { display: flex; align-items: center; gap: 10px; flex: 1; cursor: pointer; }
  .task input[type="checkbox"] { width: 18px; height: 18px; accent-color: var(--accent-strong); }
  .task .text { word-break: break-word; }
  .task .delete {
    background: transparent; color: var(--danger);
    border: 1px solid rgba(255,255,255,0.1); padding: 8px 10px;
    border-radius: 8px; font-weight: 600;
  }
  .footer {
    display: flex; align-items: center; justify-content: space-between;
    padding-top: 6px; color: var(--muted); font-size: 14px;
  }
  .link {
    color: var(--accent); text-decoration: none; font-weight: 600;
  }
  .link:hover { text-decoration: underline; }
</style>
</head>
<body>
  <main class="container">
    <h1>My To‑Do List</h1>
    <form id="new-task-form" autocomplete="off">
      <input id="task-input" type="text" placeholder="What do you need to do?" required />
      <button type="submit">Add</button>
    </form>
    <ul id="task-list"></ul>
    <div class="footer">
      <div id="count">0 items left</div>
      <button id="clear-completed" class="delete" style="border-color:#2a2f45;">Clear completed</button>
    </div>
  </main>

<script>
  const STORAGE_KEY = 'todo.tasks.v1';
  let tasks = [];

  function loadTasks() {
    try {
      const saved = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
      tasks = Array.isArray(saved) ? saved : [];
    } catch {
      tasks = [];
    }
  }

  function saveTasks() {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));
  }

  function updateCounts() {
    const remaining = tasks.filter(t => !t.done).length;
    document.getElementById('count').textContent =
      `${remaining} item${remaining === 1 ? '' : 's'} left`;
  }

  function createTaskElement(task) {
    const li = document.createElement('li');
    li.className = 'task' + (task.done ? ' done' : '');

    const label = document.createElement('label');

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.checked = task.done;
    checkbox.addEventListener('change', () => {
      task.done = checkbox.checked;
      saveTasks();
      li.classList.toggle('done', task.done);
      updateCounts();
    });

    const span = document.createElement('span');
    span.className = 'text';
    span.textContent = task.text;

    label.appendChild(checkbox);
    label.appendChild(span);

    const del = document.createElement('button');
    del.className = 'delete';
    del.textContent = 'Delete';
    del.addEventListener('click', () => {
      tasks = tasks.filter(t => t.id !== task.id);
      saveTasks();
      renderTasks();
    });

    li.appendChild(label);
    li.appendChild(del);
    return li;
  }

  function renderTasks() {
    const list = document.getElementById('task-list');
    list.innerHTML = '';
    tasks.forEach(task => list.appendChild(createTaskElement(task)));
    updateCounts();
  }

  function addTask(text) {
    const cleaned = text.trim();
    if (!cleaned) return;
    tasks.push({ id: Date.now(), text: cleaned, done: false });
    saveTasks();
    renderTasks();
  }

  document.getElementById('new-task-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const input = document.getElementById('task-input');
    addTask(input.value);
    input.value = '';
    input.focus();
  });

  document.getElementById('clear-completed').addEventListener('click', () => {
    tasks = tasks.filter(t => !t.done);
    saveTasks();
    renderTasks();
  });

  loadTasks();
  renderTasks();
</script>
</body>
</html>
